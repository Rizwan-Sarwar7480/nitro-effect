window.ga=window.ga||function(){(ga.q=ga.q||[]).push(arguments)};ga.l=+new Date;ga('create', 'UA-105392568-1', 'auto');ga('send', 'pageview');var dye,velocity,divergence,curl,pressure,bloom,sunrays,sunraysTemp,canvas=document.getElementsByTagName("canvas")[0];resizeCanvas();var config={SIM_RESOLUTION:128,DYE_RESOLUTION:1024,CAPTURE_RESOLUTION:512,DENSITY_DISSIPATION:1,VELOCITY_DISSIPATION:.2,PRESSURE:.8,PRESSURE_ITERATIONS:20,CURL:30,SPLAT_RADIUS:.25,SPLAT_FORCE:6e3,SHADING:!0,COLORFUL:!0,COLOR_UPDATE_SPEED:10,PAUSED:!1,BACK_COLOR:{r:0,g:0,b:0},TRANSPARENT:!1,BLOOM:!1,BLOOM_ITERATIONS:8,BLOOM_RESOLUTION:256,BLOOM_INTENSITY:.8,BLOOM_THRESHOLD:.6,BLOOM_SOFT_KNEE:.7,SUNRAYS:!0,SUNRAYS_RESOLUTION:196,SUNRAYS_WEIGHT:1};function pointerPrototype(){this.id=-1,this.texcoordX=0,this.texcoordY=0,this.prevTexcoordX=0,this.prevTexcoordY=0,this.deltaX=0,this.deltaY=0,this.down=!1,this.moved=!1,this.color=[30,0,300]}var pointers=[],splatStack=[];pointers.push(new pointerPrototype);var ref=getWebGLContext(canvas),gl=ref.gl,ext=ref.ext;function getWebGLContext(e){var r,n,t,i,a,o={alpha:!0,depth:!1,stencil:!1,antialias:!1,preserveDrawingBuffer:!1},l=e.getContext("webgl2",o),u=!!l;u||(l=e.getContext("webgl",o)||e.getContext("experimental-webgl",o)),u?(l.getExtension("EXT_color_buffer_float"),n=l.getExtension("OES_texture_float_linear")):(r=l.getExtension("OES_texture_half_float"),n=l.getExtension("OES_texture_half_float_linear")),l.clearColor(0,0,0,1);var c=u?l.HALF_FLOAT:r.HALF_FLOAT_OES;return u?(t=getSupportedFormat(l,l.RGBA16F,l.RGBA,c),i=getSupportedFormat(l,l.RG16F,l.RG,c),a=getSupportedFormat(l,l.R16F,l.RED,c)):(t=getSupportedFormat(l,l.RGBA,l.RGBA,c),i=getSupportedFormat(l,l.RGBA,l.RGBA,c),a=getSupportedFormat(l,l.RGBA,l.RGBA,c)),ga("send","event",u?"webgl2":"webgl",null==t?"not supported":"supported"),{gl:l,ext:{formatRGBA:t,formatRG:i,formatR:a,halfFloatTexType:c,supportLinearFiltering:n}}}function getSupportedFormat(e,r,n,t){if(!supportRenderTextureFormat(e,r,n,t))switch(r){case e.R16F:return getSupportedFormat(e,e.RG16F,e.RG,t);case e.RG16F:return getSupportedFormat(e,e.RGBA16F,e.RGBA,t);default:return null}return{internalFormat:r,format:n}}function supportRenderTextureFormat(e,r,n,t){var i=e.createTexture();e.bindTexture(e.TEXTURE_2D,i),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE),e.texImage2D(e.TEXTURE_2D,0,r,4,4,0,n,t,null);var a=e.createFramebuffer();return e.bindFramebuffer(e.FRAMEBUFFER,a),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,i,0),e.checkFramebufferStatus(e.FRAMEBUFFER)==e.FRAMEBUFFER_COMPLETE}function startGUI(){var e=new dat.GUI({width:300});e.add(config,"DYE_RESOLUTION",{high:1024,medium:512,low:256,"very low":128}).name("quality").onFinishChange(initFramebuffers),e.add(config,"SIM_RESOLUTION",{32:32,64:64,128:128,256:256}).name("sim resolution").onFinishChange(initFramebuffers),e.add(config,"DENSITY_DISSIPATION",0,4).name("density diffusion"),e.add(config,"VELOCITY_DISSIPATION",0,4).name("velocity diffusion"),e.add(config,"PRESSURE",0,1).name("pressure"),e.add(config,"CURL",0,50).name("vorticity").step(1),e.add(config,"SPLAT_RADIUS",.01,1).name("splat radius"),e.add(config,"SHADING").name("shading").onFinishChange(updateKeywords),e.add(config,"COLORFUL").name("colorful"),e.add(config,"PAUSED").name("paused").listen(),e.add({fun:function(){splatStack.push(parseInt(20*Math.random())+5)}},"fun").name("Random splats");var r=e.addFolder("Bloom");r.add(config,"BLOOM").name("enabled").onFinishChange(updateKeywords),r.add(config,"BLOOM_INTENSITY",.1,2).name("intensity"),r.add(config,"BLOOM_THRESHOLD",0,1).name("threshold");var n=e.addFolder("Sunrays");n.add(config,"SUNRAYS").name("enabled").onFinishChange(updateKeywords),n.add(config,"SUNRAYS_WEIGHT",.3,1).name("weight");var t=e.addFolder("Capture");t.addColor(config,"BACK_COLOR").name("background color"),t.add(config,"TRANSPARENT").name("transparent"),t.add({fun:captureScreenshot},"fun").name("take screenshot");var i=e.add({fun:function(){window.open("https://github.com/PavelDoGreat/WebGL-Fluid-Simulation"),ga("send","event","link button","github")}},"fun").name("Github");i.__li.className="cr function bigFont",i.__li.style.borderLeft="3px solid #8C8C8C";var a=document.createElement("span");i.domElement.parentElement.appendChild(a),a.className="icon github";var o=e.add({fun:function(){ga("send","event","link button","twitter"),window.open("https://twitter.com/PavelDoGreat")}},"fun").name("Twitter");o.__li.className="cr function bigFont",o.__li.style.borderLeft="3px solid #8C8C8C";var l=document.createElement("span");o.domElement.parentElement.appendChild(l),l.className="icon twitter";var u=e.add({fun:function(){ga("send","event","link button","discord"),window.open("https://discordapp.com/invite/CeqZDDE")}},"fun").name("Discord");u.__li.className="cr function bigFont",u.__li.style.borderLeft="3px solid #8C8C8C";var c=document.createElement("span");u.domElement.parentElement.appendChild(c),c.className="icon discord";var g=e.add({fun:function(){ga("send","event","link button","app"),window.open("http://onelink.to/5b58bn")}},"fun").name("Check out mobile app");g.__li.className="cr function appBigFont",g.__li.style.borderLeft="3px solid #00FF7F";var m=document.createElement("span");g.domElement.parentElement.appendChild(m),m.className="icon app",isMobile()&&e.close()}function isMobile(){return/Mobi|Android/i.test(navigator.userAgent)}function captureScreenshot(){var e=getResolution(config.CAPTURE_RESOLUTION),r=createFBO(e.width,e.height,ext.formatRGBA.internalFormat,ext.formatRGBA.format,ext.halfFloatTexType,gl.NEAREST);render(r);var n=framebufferToTexture(r);n=normalizeTexture(n,r.width,r.height);var t=textureToCanvas(n,r.width,r.height).toDataURL();downloadURI("fluid.png",t),URL.revokeObjectURL(t)}function framebufferToTexture(e){gl.bindFramebuffer(gl.FRAMEBUFFER,e.fbo);var r=e.width*e.height*4,n=new Float32Array(r);return gl.readPixels(0,0,e.width,e.height,gl.RGBA,gl.FLOAT,n),n}function normalizeTexture(e,r,n){for(var t=new Uint8Array(e.length),i=0,a=n-1;a>=0;a--)for(var o=0;o<r;o++){var l=a*r*4+4*o;t[l+0]=255*clamp01(e[i+0]),t[l+1]=255*clamp01(e[i+1]),t[l+2]=255*clamp01(e[i+2]),t[l+3]=255*clamp01(e[i+3]),i+=4}return t}function clamp01(e){return Math.min(Math.max(e,0),1)}function textureToCanvas(e,r,n){var t=document.createElement("canvas"),i=t.getContext("2d");t.width=r,t.height=n;var a=i.createImageData(r,n);return a.data.set(e),i.putImageData(a,0,0),t}function downloadURI(e,r){var n=document.createElement("a");n.download=e,n.href=r,document.body.appendChild(n),n.click(),document.body.removeChild(n)}isMobile()&&(config.DYE_RESOLUTION=512),ext.supportLinearFiltering||(config.DYE_RESOLUTION=512,config.SHADING=!1,config.BLOOM=!1,config.SUNRAYS=!1);var Material=function e(r,n){this.vertexShader=r,this.fragmentShaderSource=n,this.programs=[],this.activeProgram=null,this.uniforms=[]};Material.prototype.setKeywords=function e(r){for(var n=0,t=0;t<r.length;t++)n+=hashCode(r[t]);var i=this.programs[n];if(null==i){var a=compileShader(gl.FRAGMENT_SHADER,this.fragmentShaderSource,r);i=createProgram(this.vertexShader,a),this.programs[n]=i}i!=this.activeProgram&&(this.uniforms=getUniforms(i),this.activeProgram=i)},Material.prototype.bind=function e(){gl.useProgram(this.activeProgram)};var Program=function e(r,n){this.uniforms={},this.program=createProgram(r,n),this.uniforms=getUniforms(this.program)};function createProgram(e,r){var n=gl.createProgram();if(gl.attachShader(n,e),gl.attachShader(n,r),gl.linkProgram(n),!gl.getProgramParameter(n,gl.LINK_STATUS))throw gl.getProgramInfoLog(n);return n}function getUniforms(e){for(var r=[],n=gl.getProgramParameter(e,gl.ACTIVE_UNIFORMS),t=0;t<n;t++){var i=gl.getActiveUniform(e,t).name;r[i]=gl.getUniformLocation(e,i)}return r}function compileShader(e,r,n){r=addKeywords(r,n);var t=gl.createShader(e);if(gl.shaderSource(t,r),gl.compileShader(t),!gl.getShaderParameter(t,gl.COMPILE_STATUS))throw gl.getShaderInfoLog(t);return t}function addKeywords(e,r){if(null==r)return e;var n="";return r.forEach(function(e){n+="#define "+e+"\n"}),n+e}Program.prototype.bind=function e(){gl.useProgram(this.program)};var baseVertexShader=compileShader(gl.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        vL = vUv - vec2(texelSize.x, 0.0);\n        vR = vUv + vec2(texelSize.x, 0.0);\n        vT = vUv + vec2(0.0, texelSize.y);\n        vB = vUv - vec2(0.0, texelSize.y);\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),blurVertexShader=compileShader(gl.VERTEX_SHADER,"\n    precision highp float;\n\n    attribute vec2 aPosition;\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform vec2 texelSize;\n\n    void main () {\n        vUv = aPosition * 0.5 + 0.5;\n        float offset = 1.33333333;\n        vL = vUv - texelSize * offset;\n        vR = vUv + texelSize * offset;\n        gl_Position = vec4(aPosition, 0.0, 1.0);\n    }\n"),blurShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = texture2D(uTexture, vUv) * 0.29411764;\n        sum += texture2D(uTexture, vL) * 0.35294117;\n        sum += texture2D(uTexture, vR) * 0.35294117;\n        gl_FragColor = sum;\n    }\n"),copyShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        gl_FragColor = texture2D(uTexture, vUv);\n    }\n"),clearShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float value;\n\n    void main () {\n        gl_FragColor = value * texture2D(uTexture, vUv);\n    }\n"),colorShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n\n    uniform vec4 color;\n\n    void main () {\n        gl_FragColor = color;\n    }\n"),checkerboardShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float aspectRatio;\n\n    #define SCALE 25.0\n\n    void main () {\n        vec2 uv = floor(vUv * SCALE * vec2(aspectRatio, 1.0));\n        float v = mod(uv.x + uv.y, 2.0);\n        v = v * 0.1 + 0.8;\n        gl_FragColor = vec4(vec3(v), 1.0);\n    }\n"),displayShaderSource="\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform sampler2D uBloom;\n    uniform sampler2D uSunrays;\n    uniform sampler2D uDithering;\n    uniform vec2 ditherScale;\n    uniform vec2 texelSize;\n\n    vec3 linearToGamma (vec3 color) {\n        color = max(color, vec3(0));\n        return max(1.055 * pow(color, vec3(0.416666667)) - 0.055, vec3(0));\n    }\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n\n    #ifdef SHADING\n        vec3 lc = texture2D(uTexture, vL).rgb;\n        vec3 rc = texture2D(uTexture, vR).rgb;\n        vec3 tc = texture2D(uTexture, vT).rgb;\n        vec3 bc = texture2D(uTexture, vB).rgb;\n\n        float dx = length(rc) - length(lc);\n        float dy = length(tc) - length(bc);\n\n        vec3 n = normalize(vec3(dx, dy, length(texelSize)));\n        vec3 l = vec3(0.0, 0.0, 1.0);\n\n        float diffuse = clamp(dot(n, l) + 0.7, 0.7, 1.0);\n        c *= diffuse;\n    #endif\n\n    #ifdef BLOOM\n        vec3 bloom = texture2D(uBloom, vUv).rgb;\n    #endif\n\n    #ifdef SUNRAYS\n        float sunrays = texture2D(uSunrays, vUv).r;\n        c *= sunrays;\n    #ifdef BLOOM\n        bloom *= sunrays;\n    #endif\n    #endif\n\n    #ifdef BLOOM\n        float noise = texture2D(uDithering, vUv * ditherScale).r;\n        noise = noise * 2.0 - 1.0;\n        bloom += noise / 255.0;\n        bloom = linearToGamma(bloom);\n        c += bloom;\n    #endif\n\n        float a = max(c.r, max(c.g, c.b));\n        gl_FragColor = vec4(c, a);\n    }\n",bloomPrefilterShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform vec3 curve;\n    uniform float threshold;\n\n    void main () {\n        vec3 c = texture2D(uTexture, vUv).rgb;\n        float br = max(c.r, max(c.g, c.b));\n        float rq = clamp(br - curve.x, 0.0, curve.y);\n        rq = curve.z * rq * rq;\n        c *= max(rq, br - threshold) / max(br, 0.0001);\n        gl_FragColor = vec4(c, 0.0);\n    }\n"),bloomBlurShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum;\n    }\n"),bloomFinalShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uTexture;\n    uniform float intensity;\n\n    void main () {\n        vec4 sum = vec4(0.0);\n        sum += texture2D(uTexture, vL);\n        sum += texture2D(uTexture, vR);\n        sum += texture2D(uTexture, vT);\n        sum += texture2D(uTexture, vB);\n        sum *= 0.25;\n        gl_FragColor = sum * intensity;\n    }\n"),sunraysMaskShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n\n    void main () {\n        vec4 c = texture2D(uTexture, vUv);\n        float br = max(c.r, max(c.g, c.b));\n        c.a = 1.0 - min(max(br * 20.0, 0.0), 0.8);\n        gl_FragColor = c;\n    }\n"),sunraysShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTexture;\n    uniform float weight;\n\n    #define ITERATIONS 16\n\n    void main () {\n        float Density = 0.3;\n        float Decay = 0.95;\n        float Exposure = 0.7;\n\n        vec2 coord = vUv;\n        vec2 dir = vUv - 0.5;\n\n        dir *= 1.0 / float(ITERATIONS) * Density;\n        float illuminationDecay = 1.0;\n\n        float color = texture2D(uTexture, vUv).a;\n\n        for (int i = 0; i < ITERATIONS; i++)\n        {\n            coord -= dir;\n            float col = texture2D(uTexture, coord).a;\n            color += col * illuminationDecay * weight;\n            illuminationDecay *= Decay;\n        }\n\n        gl_FragColor = vec4(color * Exposure, 0.0, 0.0, 1.0);\n    }\n"),splatShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uTarget;\n    uniform float aspectRatio;\n    uniform vec3 color;\n    uniform vec2 point;\n    uniform float radius;\n\n    void main () {\n        vec2 p = vUv - point.xy;\n        p.x *= aspectRatio;\n        vec3 splat = exp(-dot(p, p) / radius) * color;\n        vec3 base = texture2D(uTarget, vUv).xyz;\n        gl_FragColor = vec4(base + splat, 1.0);\n    }\n"),advectionShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uSource;\n    uniform vec2 texelSize;\n    uniform vec2 dyeTexelSize;\n    uniform float dt;\n    uniform float dissipation;\n\n    vec4 bilerp (sampler2D sam, vec2 uv, vec2 tsize) {\n        vec2 st = uv / tsize - 0.5;\n\n        vec2 iuv = floor(st);\n        vec2 fuv = fract(st);\n\n        vec4 a = texture2D(sam, (iuv + vec2(0.5, 0.5)) * tsize);\n        vec4 b = texture2D(sam, (iuv + vec2(1.5, 0.5)) * tsize);\n        vec4 c = texture2D(sam, (iuv + vec2(0.5, 1.5)) * tsize);\n        vec4 d = texture2D(sam, (iuv + vec2(1.5, 1.5)) * tsize);\n\n        return mix(mix(a, b, fuv.x), mix(c, d, fuv.x), fuv.y);\n    }\n\n    void main () {\n    #ifdef MANUAL_FILTERING\n        vec2 coord = vUv - dt * bilerp(uVelocity, vUv, texelSize).xy * texelSize;\n        vec4 result = bilerp(uSource, coord, dyeTexelSize);\n    #else\n        vec2 coord = vUv - dt * texture2D(uVelocity, vUv).xy * texelSize;\n        vec4 result = texture2D(uSource, coord);\n    #endif\n        float decay = 1.0 + dissipation * dt;\n        gl_FragColor = result / decay;\n    }",ext.supportLinearFiltering?null:["MANUAL_FILTERING"]),divergenceShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).x;\n        float R = texture2D(uVelocity, vR).x;\n        float T = texture2D(uVelocity, vT).y;\n        float B = texture2D(uVelocity, vB).y;\n\n        vec2 C = texture2D(uVelocity, vUv).xy;\n        if (vL.x < 0.0) { L = -C.x; }\n        if (vR.x > 1.0) { R = -C.x; }\n        if (vT.y > 1.0) { T = -C.y; }\n        if (vB.y < 0.0) { B = -C.y; }\n\n        float div = 0.5 * (R - L + T - B);\n        gl_FragColor = vec4(div, 0.0, 0.0, 1.0);\n    }\n"),curlShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uVelocity, vL).y;\n        float R = texture2D(uVelocity, vR).y;\n        float T = texture2D(uVelocity, vT).x;\n        float B = texture2D(uVelocity, vB).x;\n        float vorticity = R - L - T + B;\n        gl_FragColor = vec4(0.5 * vorticity, 0.0, 0.0, 1.0);\n    }\n"),vorticityShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision highp float;\n    precision highp sampler2D;\n\n    varying vec2 vUv;\n    varying vec2 vL;\n    varying vec2 vR;\n    varying vec2 vT;\n    varying vec2 vB;\n    uniform sampler2D uVelocity;\n    uniform sampler2D uCurl;\n    uniform float curl;\n    uniform float dt;\n\n    void main () {\n        float L = texture2D(uCurl, vL).x;\n        float R = texture2D(uCurl, vR).x;\n        float T = texture2D(uCurl, vT).x;\n        float B = texture2D(uCurl, vB).x;\n        float C = texture2D(uCurl, vUv).x;\n\n        vec2 force = 0.5 * vec2(abs(T) - abs(B), abs(R) - abs(L));\n        force /= length(force) + 0.0001;\n        force *= curl * C;\n        force.y *= -1.0;\n\n        vec2 vel = texture2D(uVelocity, vUv).xy;\n        gl_FragColor = vec4(vel + force * dt, 0.0, 1.0);\n    }\n"),pressureShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uDivergence;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        float C = texture2D(uPressure, vUv).x;\n        float divergence = texture2D(uDivergence, vUv).x;\n        float pressure = (L + R + B + T - divergence) * 0.25;\n        gl_FragColor = vec4(pressure, 0.0, 0.0, 1.0);\n    }\n"),gradientSubtractShader=compileShader(gl.FRAGMENT_SHADER,"\n    precision mediump float;\n    precision mediump sampler2D;\n\n    varying highp vec2 vUv;\n    varying highp vec2 vL;\n    varying highp vec2 vR;\n    varying highp vec2 vT;\n    varying highp vec2 vB;\n    uniform sampler2D uPressure;\n    uniform sampler2D uVelocity;\n\n    void main () {\n        float L = texture2D(uPressure, vL).x;\n        float R = texture2D(uPressure, vR).x;\n        float T = texture2D(uPressure, vT).x;\n        float B = texture2D(uPressure, vB).x;\n        vec2 velocity = texture2D(uVelocity, vUv).xy;\n        velocity.xy -= vec2(R - L, T - B);\n        gl_FragColor = vec4(velocity, 0.0, 1.0);\n    }\n"),blit=(gl.bindBuffer(gl.ARRAY_BUFFER,gl.createBuffer()),gl.bufferData(gl.ARRAY_BUFFER,new Float32Array([-1,-1,-1,1,1,1,1,-1]),gl.STATIC_DRAW),gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,gl.createBuffer()),gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,new Uint16Array([0,1,2,0,2,3]),gl.STATIC_DRAW),gl.vertexAttribPointer(0,2,gl.FLOAT,!1,0,0),gl.enableVertexAttribArray(0),function(e){gl.bindFramebuffer(gl.FRAMEBUFFER,e),gl.drawElements(gl.TRIANGLES,6,gl.UNSIGNED_SHORT,0)}),bloomFramebuffers=[],ditheringTexture=createTextureAsync("LDR_LLL1_0.png"),blurProgram=new Program(blurVertexShader,blurShader),copyProgram=new Program(baseVertexShader,copyShader),clearProgram=new Program(baseVertexShader,clearShader),colorProgram=new Program(baseVertexShader,colorShader),checkerboardProgram=new Program(baseVertexShader,checkerboardShader),bloomPrefilterProgram=new Program(baseVertexShader,bloomPrefilterShader),bloomBlurProgram=new Program(baseVertexShader,bloomBlurShader),bloomFinalProgram=new Program(baseVertexShader,bloomFinalShader),sunraysMaskProgram=new Program(baseVertexShader,sunraysMaskShader),sunraysProgram=new Program(baseVertexShader,sunraysShader),splatProgram=new Program(baseVertexShader,splatShader),advectionProgram=new Program(baseVertexShader,advectionShader),divergenceProgram=new Program(baseVertexShader,divergenceShader),curlProgram=new Program(baseVertexShader,curlShader),vorticityProgram=new Program(baseVertexShader,vorticityShader),pressureProgram=new Program(baseVertexShader,pressureShader),gradienSubtractProgram=new Program(baseVertexShader,gradientSubtractShader),displayMaterial=new Material(baseVertexShader,displayShaderSource);function initFramebuffers(){var e=getResolution(config.SIM_RESOLUTION),r=getResolution(config.DYE_RESOLUTION),n=ext.halfFloatTexType,t=ext.formatRGBA,i=ext.formatRG,a=ext.formatR,o=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;dye=null==dye?createDoubleFBO(r.width,r.height,t.internalFormat,t.format,n,o):resizeDoubleFBO(dye,r.width,r.height,t.internalFormat,t.format,n,o),velocity=null==velocity?createDoubleFBO(e.width,e.height,i.internalFormat,i.format,n,o):resizeDoubleFBO(velocity,e.width,e.height,i.internalFormat,i.format,n,o),divergence=createFBO(e.width,e.height,a.internalFormat,a.format,n,gl.NEAREST),curl=createFBO(e.width,e.height,a.internalFormat,a.format,n,gl.NEAREST),pressure=createDoubleFBO(e.width,e.height,a.internalFormat,a.format,n,gl.NEAREST),initBloomFramebuffers(),initSunraysFramebuffers()}function initBloomFramebuffers(){var e=getResolution(config.BLOOM_RESOLUTION),r=ext.halfFloatTexType,n=ext.formatRGBA,t=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;bloom=createFBO(e.width,e.height,n.internalFormat,n.format,r,t),bloomFramebuffers.length=0;for(var i=0;i<config.BLOOM_ITERATIONS;i++){var a=e.width>>i+1,o=e.height>>i+1;if(a<2||o<2)break;var l=createFBO(a,o,n.internalFormat,n.format,r,t);bloomFramebuffers.push(l)}}function initSunraysFramebuffers(){var e=getResolution(config.SUNRAYS_RESOLUTION),r=ext.halfFloatTexType,n=ext.formatR,t=ext.supportLinearFiltering?gl.LINEAR:gl.NEAREST;sunrays=createFBO(e.width,e.height,n.internalFormat,n.format,r,t),sunraysTemp=createFBO(e.width,e.height,n.internalFormat,n.format,r,t)}function createFBO(e,r,n,t,i,a){gl.activeTexture(gl.TEXTURE0);var o=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,o),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,a),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE),gl.texImage2D(gl.TEXTURE_2D,0,n,e,r,0,t,i,null);var l=gl.createFramebuffer();return gl.bindFramebuffer(gl.FRAMEBUFFER,l),gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,o,0),gl.viewport(0,0,e,r),gl.clear(gl.COLOR_BUFFER_BIT),{texture:o,fbo:l,width:e,height:r,texelSizeX:1/e,texelSizeY:1/r,attach:function e(r){return gl.activeTexture(gl.TEXTURE0+r),gl.bindTexture(gl.TEXTURE_2D,o),r}}}function createDoubleFBO(e,r,n,t,i,a){var o=createFBO(e,r,n,t,i,a),l=createFBO(e,r,n,t,i,a);return{width:e,height:r,texelSizeX:o.texelSizeX,texelSizeY:o.texelSizeY,get read(){return o},set read(value){o=value},get write(){return l},set write(value){l=value},swap:function e(){var r=o;o=l,l=r}}}function resizeFBO(e,r,n,t,i,a,o){var l=createFBO(r,n,t,i,a,o);return copyProgram.bind(),gl.uniform1i(copyProgram.uniforms.uTexture,e.attach(0)),blit(l.fbo),l}function resizeDoubleFBO(e,r,n,t,i,a,o){return e.width==r&&e.height==n||(e.read=resizeFBO(e.read,r,n,t,i,a,o),e.write=createFBO(r,n,t,i,a,o),e.width=r,e.height=n,e.texelSizeX=1/r,e.texelSizeY=1/n),e}function createTextureAsync(e){var r=gl.createTexture();gl.bindTexture(gl.TEXTURE_2D,r),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT),gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,1,1,0,gl.RGB,gl.UNSIGNED_BYTE,new Uint8Array([255,255,255]));var n={texture:r,width:1,height:1,attach:function e(n){return gl.activeTexture(gl.TEXTURE0+n),gl.bindTexture(gl.TEXTURE_2D,r),n}},t=new Image;return t.onload=function(){n.width=t.width,n.height=t.height,gl.bindTexture(gl.TEXTURE_2D,r),gl.texImage2D(gl.TEXTURE_2D,0,gl.RGB,gl.RGB,gl.UNSIGNED_BYTE,t)},t.src=e,n}function updateKeywords(){var e=[];config.SHADING&&e.push("SHADING"),config.BLOOM&&e.push("BLOOM"),config.SUNRAYS&&e.push("SUNRAYS"),displayMaterial.setKeywords(e)}updateKeywords(),initFramebuffers();var lastUpdateTime=Date.now(),colorUpdateTimer=0;function update(){var e=calcDeltaTime();resizeCanvas()&&initFramebuffers(),updateColors(e),applyInputs(),config.PAUSED||step(e),render(null),requestAnimationFrame(update)}function calcDeltaTime(){var e=Date.now(),r=(e-lastUpdateTime)/1e3;return r=Math.min(r,.016666),lastUpdateTime=e,r}function resizeCanvas(){var e=scaleByPixelRatio(canvas.clientWidth),r=scaleByPixelRatio(canvas.clientHeight);return(canvas.width!=e||canvas.height!=r)&&(canvas.width=e,canvas.height=r,!0)}function updateColors(e){config.COLORFUL&&(colorUpdateTimer+=e*config.COLOR_UPDATE_SPEED)>=1&&(colorUpdateTimer=wrap(colorUpdateTimer,0,1),pointers.forEach(function(e){e.color=generateColor()}))}function applyInputs(){splatStack.length>0&&multipleSplats(splatStack.pop()),pointers.forEach(function(e){e.moved&&(e.moved=!1,splatPointer(e))})}function step(e){gl.disable(gl.BLEND),gl.viewport(0,0,velocity.width,velocity.height),curlProgram.bind(),gl.uniform2f(curlProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(curlProgram.uniforms.uVelocity,velocity.read.attach(0)),blit(curl.fbo),vorticityProgram.bind(),gl.uniform2f(vorticityProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(vorticityProgram.uniforms.uVelocity,velocity.read.attach(0)),gl.uniform1i(vorticityProgram.uniforms.uCurl,curl.attach(1)),gl.uniform1f(vorticityProgram.uniforms.curl,config.CURL),gl.uniform1f(vorticityProgram.uniforms.dt,e),blit(velocity.write.fbo),velocity.swap(),divergenceProgram.bind(),gl.uniform2f(divergenceProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(divergenceProgram.uniforms.uVelocity,velocity.read.attach(0)),blit(divergence.fbo),clearProgram.bind(),gl.uniform1i(clearProgram.uniforms.uTexture,pressure.read.attach(0)),gl.uniform1f(clearProgram.uniforms.value,config.PRESSURE),blit(pressure.write.fbo),pressure.swap(),pressureProgram.bind(),gl.uniform2f(pressureProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(pressureProgram.uniforms.uDivergence,divergence.attach(0));for(var r=0;r<config.PRESSURE_ITERATIONS;r++)gl.uniform1i(pressureProgram.uniforms.uPressure,pressure.read.attach(1)),blit(pressure.write.fbo),pressure.swap();gradienSubtractProgram.bind(),gl.uniform2f(gradienSubtractProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),gl.uniform1i(gradienSubtractProgram.uniforms.uPressure,pressure.read.attach(0)),gl.uniform1i(gradienSubtractProgram.uniforms.uVelocity,velocity.read.attach(1)),blit(velocity.write.fbo),velocity.swap(),advectionProgram.bind(),gl.uniform2f(advectionProgram.uniforms.texelSize,velocity.texelSizeX,velocity.texelSizeY),ext.supportLinearFiltering||gl.uniform2f(advectionProgram.uniforms.dyeTexelSize,velocity.texelSizeX,velocity.texelSizeY);var n=velocity.read.attach(0);gl.uniform1i(advectionProgram.uniforms.uVelocity,n),gl.uniform1i(advectionProgram.uniforms.uSource,n),gl.uniform1f(advectionProgram.uniforms.dt,e),gl.uniform1f(advectionProgram.uniforms.dissipation,config.VELOCITY_DISSIPATION),blit(velocity.write.fbo),velocity.swap(),gl.viewport(0,0,dye.width,dye.height),ext.supportLinearFiltering||gl.uniform2f(advectionProgram.uniforms.dyeTexelSize,dye.texelSizeX,dye.texelSizeY),gl.uniform1i(advectionProgram.uniforms.uVelocity,velocity.read.attach(0)),gl.uniform1i(advectionProgram.uniforms.uSource,dye.read.attach(1)),gl.uniform1f(advectionProgram.uniforms.dissipation,config.DENSITY_DISSIPATION),blit(dye.write.fbo),dye.swap()}function render(e){config.BLOOM&&applyBloom(dye.read,bloom),config.SUNRAYS&&(applySunrays(dye.read,dye.write,sunrays),blur(sunrays,sunraysTemp,1)),null!=e&&config.TRANSPARENT?gl.disable(gl.BLEND):(gl.blendFunc(gl.ONE,gl.ONE_MINUS_SRC_ALPHA),gl.enable(gl.BLEND));var r=null==e?gl.drawingBufferWidth:e.width,n=null==e?gl.drawingBufferHeight:e.height;gl.viewport(0,0,r,n);var t=null==e?null:e.fbo;config.TRANSPARENT||drawColor(t,normalizeColor(config.BACK_COLOR)),null==e&&config.TRANSPARENT&&drawCheckerboard(t),drawDisplay(t,r,n)}function drawColor(e,r){colorProgram.bind(),gl.uniform4f(colorProgram.uniforms.color,r.r,r.g,r.b,1),blit(e)}function drawCheckerboard(e){checkerboardProgram.bind(),gl.uniform1f(checkerboardProgram.uniforms.aspectRatio,canvas.width/canvas.height),blit(e)}function drawDisplay(e,r,n){if(displayMaterial.bind(),config.SHADING&&gl.uniform2f(displayMaterial.uniforms.texelSize,1/r,1/n),gl.uniform1i(displayMaterial.uniforms.uTexture,dye.read.attach(0)),config.BLOOM){gl.uniform1i(displayMaterial.uniforms.uBloom,bloom.attach(1)),gl.uniform1i(displayMaterial.uniforms.uDithering,ditheringTexture.attach(2));var t=getTextureScale(ditheringTexture,r,n);gl.uniform2f(displayMaterial.uniforms.ditherScale,t.x,t.y)}config.SUNRAYS&&gl.uniform1i(displayMaterial.uniforms.uSunrays,sunrays.attach(3)),blit(e)}function applyBloom(e,r){if(!(bloomFramebuffers.length<2)){var n=r;gl.disable(gl.BLEND),bloomPrefilterProgram.bind();var t=config.BLOOM_THRESHOLD*config.BLOOM_SOFT_KNEE+1e-4,i=config.BLOOM_THRESHOLD-t;gl.uniform3f(bloomPrefilterProgram.uniforms.curve,i,2*t,.25/t),gl.uniform1f(bloomPrefilterProgram.uniforms.threshold,config.BLOOM_THRESHOLD),gl.uniform1i(bloomPrefilterProgram.uniforms.uTexture,e.attach(0)),gl.viewport(0,0,n.width,n.height),blit(n.fbo),bloomBlurProgram.bind();for(var a=0;a<bloomFramebuffers.length;a++){var o=bloomFramebuffers[a];gl.uniform2f(bloomBlurProgram.uniforms.texelSize,n.texelSizeX,n.texelSizeY),gl.uniform1i(bloomBlurProgram.uniforms.uTexture,n.attach(0)),gl.viewport(0,0,o.width,o.height),blit(o.fbo),n=o}gl.blendFunc(gl.ONE,gl.ONE),gl.enable(gl.BLEND);for(var l=bloomFramebuffers.length-2;l>=0;l--){var u=bloomFramebuffers[l];gl.uniform2f(bloomBlurProgram.uniforms.texelSize,n.texelSizeX,n.texelSizeY),gl.uniform1i(bloomBlurProgram.uniforms.uTexture,n.attach(0)),gl.viewport(0,0,u.width,u.height),blit(u.fbo),n=u}gl.disable(gl.BLEND),bloomFinalProgram.bind(),gl.uniform2f(bloomFinalProgram.uniforms.texelSize,n.texelSizeX,n.texelSizeY),gl.uniform1i(bloomFinalProgram.uniforms.uTexture,n.attach(0)),gl.uniform1f(bloomFinalProgram.uniforms.intensity,config.BLOOM_INTENSITY),gl.viewport(0,0,r.width,r.height),blit(r.fbo)}}function applySunrays(e,r,n){gl.disable(gl.BLEND),sunraysMaskProgram.bind(),gl.uniform1i(sunraysMaskProgram.uniforms.uTexture,e.attach(0)),gl.viewport(0,0,r.width,r.height),blit(r.fbo),sunraysProgram.bind(),gl.uniform1f(sunraysProgram.uniforms.weight,config.SUNRAYS_WEIGHT),gl.uniform1i(sunraysProgram.uniforms.uTexture,r.attach(0)),gl.viewport(0,0,n.width,n.height),blit(n.fbo)}function blur(e,r,n){blurProgram.bind();for(var t=0;t<n;t++)gl.uniform2f(blurProgram.uniforms.texelSize,e.texelSizeX,0),gl.uniform1i(blurProgram.uniforms.uTexture,e.attach(0)),blit(r.fbo),gl.uniform2f(blurProgram.uniforms.texelSize,0,e.texelSizeY),gl.uniform1i(blurProgram.uniforms.uTexture,r.attach(0)),blit(e.fbo)}function splatPointer(e){var r=e.deltaX*config.SPLAT_FORCE,n=e.deltaY*config.SPLAT_FORCE;splat(e.texcoordX,e.texcoordY,r,n,e.color)}function multipleSplats(e){for(var r=0;r<e;r++){var n=generateColor();n.r*=10,n.g*=10,n.b*=10,splat(Math.random(),Math.random(),1e3*(Math.random()-.5),1e3*(Math.random()-.5),n)}}function splat(e,r,n,t,i){gl.viewport(0,0,velocity.width,velocity.height),splatProgram.bind(),gl.uniform1i(splatProgram.uniforms.uTarget,velocity.read.attach(0)),gl.uniform1f(splatProgram.uniforms.aspectRatio,canvas.width/canvas.height),gl.uniform2f(splatProgram.uniforms.point,e,r),gl.uniform3f(splatProgram.uniforms.color,n,t,0),gl.uniform1f(splatProgram.uniforms.radius,correctRadius(config.SPLAT_RADIUS/100)),blit(velocity.write.fbo),velocity.swap(),gl.viewport(0,0,dye.width,dye.height),gl.uniform1i(splatProgram.uniforms.uTarget,dye.read.attach(0)),gl.uniform3f(splatProgram.uniforms.color,i.r,i.g,i.b),blit(dye.write.fbo),dye.swap()}function correctRadius(e){var r=canvas.width/canvas.height;return r>1&&(e*=r),e}function updatePointerDownData(e,r,n,t){e.id=r,e.down=!0,e.moved=!1,e.texcoordX=n/canvas.width,e.texcoordY=1-t/canvas.height,e.prevTexcoordX=e.texcoordX,e.prevTexcoordY=e.texcoordY,e.deltaX=0,e.deltaY=0,e.color=generateColor()}function updatePointerMoveData(e,r,n){e.prevTexcoordX=e.texcoordX,e.prevTexcoordY=e.texcoordY,e.texcoordX=r/canvas.width,e.texcoordY=1-n/canvas.height,e.deltaX=correctDeltaX(e.texcoordX-e.prevTexcoordX),e.deltaY=correctDeltaY(e.texcoordY-e.prevTexcoordY),e.moved=Math.abs(e.deltaX)>0||Math.abs(e.deltaY)>0}function updatePointerUpData(e){e.down=!1}function correctDeltaX(e){var r=canvas.width/canvas.height;return r<1&&(e*=r),e}function correctDeltaY(e){var r=canvas.width/canvas.height;return r>1&&(e/=r),e}function generateColor(){var e=HSVtoRGB(Math.random(),1,1);return e.r*=.15,e.g*=.15,e.b*=.15,e}function HSVtoRGB(e,r,n){var t,i,a,o,l,u,c,g;switch(o=Math.floor(6*e),l=6*e-o,u=n*(1-r),c=n*(1-l*r),g=n*(1-(1-l)*r),o%6){case 0:t=n,i=g,a=u;break;case 1:t=c,i=n,a=u;break;case 2:t=u,i=n,a=g;break;case 3:t=u,i=c,a=n;break;case 4:t=g,i=u,a=n;break;case 5:t=n,i=u,a=c}return{r:t,g:i,b:a}}function normalizeColor(e){return{r:e.r/255,g:e.g/255,b:e.b/255}}function wrap(e,r,n){var t=n-r;return 0==t?r:(e-r)%t+r}function getResolution(e){var r=gl.drawingBufferWidth/gl.drawingBufferHeight;r<1&&(r=1/r);var n=Math.round(e),t=Math.round(e*r);return gl.drawingBufferWidth>gl.drawingBufferHeight?{width:t,height:n}:{width:n,height:t}}function getTextureScale(e,r,n){return{x:r/e.width,y:n/e.height}}function scaleByPixelRatio(e){return Math.floor(e*(window.devicePixelRatio||1))}function hashCode(e){if(0==e.length)return 0;for(var r=0,n=0;n<e.length;n++)r=(r<<5)-r+e.charCodeAt(n),r|=0;return r}update(),canvas.addEventListener("mouseenter",function(e){var r=scaleByPixelRatio(e.offsetX),n=scaleByPixelRatio(e.offsetY),t=pointers.find(function(e){return -1==e.id});null==t&&(t=new pointerPrototype),updatePointerDownData(t,-1,r,n)}),canvas.addEventListener("mousemove",function(e){var r=pointers[0];if(r.down){var n=scaleByPixelRatio(e.offsetX),t=scaleByPixelRatio(e.offsetY);updatePointerMoveData(r,n,t)}}),canvas.addEventListener("touchstart",function(e){e.preventDefault();for(var r=e.targetTouches;r.length>=pointers.length;)pointers.push(new pointerPrototype);for(var n=0;n<r.length;n++){var t=scaleByPixelRatio(r[n].pageX),i=scaleByPixelRatio(r[n].pageY);updatePointerDownData(pointers[n+1],r[n].identifier,t,i)}}),canvas.addEventListener("touchmove",function(e){e.preventDefault();for(var r=e.targetTouches,n=0;n<r.length;n++){var t=pointers[n+1];if(t.down){var i=scaleByPixelRatio(r[n].pageX),a=scaleByPixelRatio(r[n].pageY);updatePointerMoveData(t,i,a)}}},!1),window.addEventListener("touchend",function(e){for(var r=e.changedTouches,n=function(e){var n=pointers.find(function(n){return n.id==r[e].identifier});null!=n&&updatePointerUpData(n)},t=0;t<r.length;t++)n(t)}),window.addEventListener("keydown",function(e){"KeyP"===e.code&&(config.PAUSED=!config.PAUSED)," "===e.key&&splatStack.push(parseInt(20*Math.random())+5)});